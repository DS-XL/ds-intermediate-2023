{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# This practice will cover learning points in Topic 2\n",
    "### 1 - Fit MLR model in python with sklearn and statsmodels packages\n",
    "### 2 - Model Selection\n",
    "### 3 - Weighted regression\n",
    "### 4 - Regularization, L1 and L2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import required Python packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# if you haven't installed statsmodels\n",
    "! pip install statsmodels dmba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no display found. Using non-interactive Agg backend\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.metrics import r2_score, mean_squared_error\n",
    "from sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\n",
    "\n",
    "import statsmodels.api as sm\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from dmba import stepwise_selection\n",
    "from dmba import AIC_score\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define paths to data sets. If you don't keep your data in the same directory as the code, adapt the path names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DATA = Path('.').resolve().parents[1] / 'Practice/mlr'\n",
    "# HOUSE_CSV = DATA / 'house_sales.csv'\n",
    "\n",
    "HOUSE_CSV = 'house_sales.csv'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data read and train-test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(18149, 22) (4538, 22)\n"
     ]
    }
   ],
   "source": [
    "houseall = pd.read_csv(HOUSE_CSV, sep='\\t')\n",
    "\n",
    "house, house_test = train_test_split(houseall, test_size=0.2)\n",
    "\n",
    "print(house.shape, house_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DocumentDate</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>PropertyID</th>\n",
       "      <th>PropertyType</th>\n",
       "      <th>ym</th>\n",
       "      <th>zhvi_px</th>\n",
       "      <th>zhvi_idx</th>\n",
       "      <th>AdjSalePrice</th>\n",
       "      <th>NbrLivingUnits</th>\n",
       "      <th>SqFtLot</th>\n",
       "      <th>...</th>\n",
       "      <th>Bathrooms</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>BldgGrade</th>\n",
       "      <th>YrBuilt</th>\n",
       "      <th>YrRenovated</th>\n",
       "      <th>TrafficNoise</th>\n",
       "      <th>LandVal</th>\n",
       "      <th>ImpsVal</th>\n",
       "      <th>ZipCode</th>\n",
       "      <th>NewConstruction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2957</th>\n",
       "      <td>2007-05-04</td>\n",
       "      <td>440000</td>\n",
       "      <td>1137400360</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2007-05-01</td>\n",
       "      <td>432100</td>\n",
       "      <td>0.992877</td>\n",
       "      <td>443157.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5543</td>\n",
       "      <td>...</td>\n",
       "      <td>2.50</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>2005</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>156000</td>\n",
       "      <td>233000</td>\n",
       "      <td>98059</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5233</th>\n",
       "      <td>2013-07-15</td>\n",
       "      <td>705000</td>\n",
       "      <td>1778350070</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2013-07-01</td>\n",
       "      <td>370700</td>\n",
       "      <td>0.851792</td>\n",
       "      <td>827667.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10819</td>\n",
       "      <td>...</td>\n",
       "      <td>2.75</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>1996</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>316000</td>\n",
       "      <td>531000</td>\n",
       "      <td>98027</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3390</th>\n",
       "      <td>2006-09-27</td>\n",
       "      <td>639000</td>\n",
       "      <td>1246700260</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2006-09-01</td>\n",
       "      <td>414800</td>\n",
       "      <td>0.953125</td>\n",
       "      <td>670426.0</td>\n",
       "      <td>1</td>\n",
       "      <td>46609</td>\n",
       "      <td>...</td>\n",
       "      <td>2.50</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1974</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>475000</td>\n",
       "      <td>79000</td>\n",
       "      <td>98033</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13107</th>\n",
       "      <td>2008-09-05</td>\n",
       "      <td>495000</td>\n",
       "      <td>3876310300</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2008-09-01</td>\n",
       "      <td>394900</td>\n",
       "      <td>0.907399</td>\n",
       "      <td>545515.0</td>\n",
       "      <td>1</td>\n",
       "      <td>8000</td>\n",
       "      <td>...</td>\n",
       "      <td>2.75</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>1972</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>143000</td>\n",
       "      <td>327000</td>\n",
       "      <td>98034</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22926</th>\n",
       "      <td>2007-04-18</td>\n",
       "      <td>355000</td>\n",
       "      <td>8122600140</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2007-04-01</td>\n",
       "      <td>430900</td>\n",
       "      <td>0.990119</td>\n",
       "      <td>358543.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5289</td>\n",
       "      <td>...</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>1945</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>102000</td>\n",
       "      <td>250000</td>\n",
       "      <td>98126</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      DocumentDate  SalePrice  PropertyID   PropertyType          ym  zhvi_px  \\\n",
       "2957    2007-05-04     440000  1137400360  Single Family  2007-05-01   432100   \n",
       "5233    2013-07-15     705000  1778350070  Single Family  2013-07-01   370700   \n",
       "3390    2006-09-27     639000  1246700260  Single Family  2006-09-01   414800   \n",
       "13107   2008-09-05     495000  3876310300  Single Family  2008-09-01   394900   \n",
       "22926   2007-04-18     355000  8122600140  Single Family  2007-04-01   430900   \n",
       "\n",
       "       zhvi_idx  AdjSalePrice  NbrLivingUnits  SqFtLot  ...  Bathrooms  \\\n",
       "2957   0.992877      443157.0               1     5543  ...       2.50   \n",
       "5233   0.851792      827667.0               1    10819  ...       2.75   \n",
       "3390   0.953125      670426.0               1    46609  ...       2.50   \n",
       "13107  0.907399      545515.0               1     8000  ...       2.75   \n",
       "22926  0.990119      358543.0               1     5289  ...       2.00   \n",
       "\n",
       "       Bedrooms  BldgGrade  YrBuilt  YrRenovated  TrafficNoise  LandVal  \\\n",
       "2957          4          7     2005            0             0   156000   \n",
       "5233          4          9     1996            0             0   316000   \n",
       "3390          4          7     1974            0             0   475000   \n",
       "13107         5          7     1972            0             0   143000   \n",
       "22926         3          6     1945            0             0   102000   \n",
       "\n",
       "       ImpsVal  ZipCode  NewConstruction  \n",
       "2957    233000    98059            False  \n",
       "5233    531000    98027            False  \n",
       "3390     79000    98033            False  \n",
       "13107   327000    98034            False  \n",
       "22926   250000    98126            False  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# let's see more columns\n",
    "pd.set_option('display.max_columns', 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DocumentDate</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>PropertyID</th>\n",
       "      <th>PropertyType</th>\n",
       "      <th>ym</th>\n",
       "      <th>zhvi_px</th>\n",
       "      <th>zhvi_idx</th>\n",
       "      <th>AdjSalePrice</th>\n",
       "      <th>NbrLivingUnits</th>\n",
       "      <th>SqFtLot</th>\n",
       "      <th>SqFtTotLiving</th>\n",
       "      <th>SqFtFinBasement</th>\n",
       "      <th>Bathrooms</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>BldgGrade</th>\n",
       "      <th>YrBuilt</th>\n",
       "      <th>YrRenovated</th>\n",
       "      <th>TrafficNoise</th>\n",
       "      <th>LandVal</th>\n",
       "      <th>ImpsVal</th>\n",
       "      <th>ZipCode</th>\n",
       "      <th>NewConstruction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1030</th>\n",
       "      <td>2006-07-10</td>\n",
       "      <td>550000</td>\n",
       "      <td>381000365</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2006-07-01</td>\n",
       "      <td>407700</td>\n",
       "      <td>0.936811</td>\n",
       "      <td>587098.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7134</td>\n",
       "      <td>1620</td>\n",
       "      <td>0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1953</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>348000</td>\n",
       "      <td>280000</td>\n",
       "      <td>98115</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5781</th>\n",
       "      <td>2007-09-04</td>\n",
       "      <td>950000</td>\n",
       "      <td>1924059150</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2007-09-01</td>\n",
       "      <td>433500</td>\n",
       "      <td>0.996094</td>\n",
       "      <td>953725.0</td>\n",
       "      <td>1</td>\n",
       "      <td>15923</td>\n",
       "      <td>3690</td>\n",
       "      <td>1700</td>\n",
       "      <td>3.00</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1952</td>\n",
       "      <td>2000</td>\n",
       "      <td>0</td>\n",
       "      <td>597000</td>\n",
       "      <td>356000</td>\n",
       "      <td>98040</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2801</th>\n",
       "      <td>2011-09-08</td>\n",
       "      <td>318000</td>\n",
       "      <td>1105000065</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2011-09-01</td>\n",
       "      <td>312000</td>\n",
       "      <td>0.716912</td>\n",
       "      <td>443569.0</td>\n",
       "      <td>1</td>\n",
       "      <td>14732</td>\n",
       "      <td>1540</td>\n",
       "      <td>0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1965</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>235000</td>\n",
       "      <td>172000</td>\n",
       "      <td>98118</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14633</th>\n",
       "      <td>2006-01-06</td>\n",
       "      <td>249950</td>\n",
       "      <td>4310700775</td>\n",
       "      <td>Townhouse</td>\n",
       "      <td>2006-01-01</td>\n",
       "      <td>383200</td>\n",
       "      <td>0.880515</td>\n",
       "      <td>283868.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1558</td>\n",
       "      <td>1860</td>\n",
       "      <td>0</td>\n",
       "      <td>2.25</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>2014</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>93000</td>\n",
       "      <td>315000</td>\n",
       "      <td>98103</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11532</th>\n",
       "      <td>2006-03-21</td>\n",
       "      <td>550000</td>\n",
       "      <td>3449810010</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>2006-03-01</td>\n",
       "      <td>392100</td>\n",
       "      <td>0.900965</td>\n",
       "      <td>610457.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6955</td>\n",
       "      <td>2451</td>\n",
       "      <td>0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>1997</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>205000</td>\n",
       "      <td>290000</td>\n",
       "      <td>98056</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      DocumentDate  SalePrice  PropertyID   PropertyType          ym  zhvi_px  \\\n",
       "1030    2006-07-10     550000   381000365  Single Family  2006-07-01   407700   \n",
       "5781    2007-09-04     950000  1924059150  Single Family  2007-09-01   433500   \n",
       "2801    2011-09-08     318000  1105000065  Single Family  2011-09-01   312000   \n",
       "14633   2006-01-06     249950  4310700775      Townhouse  2006-01-01   383200   \n",
       "11532   2006-03-21     550000  3449810010  Single Family  2006-03-01   392100   \n",
       "\n",
       "       zhvi_idx  AdjSalePrice  NbrLivingUnits  SqFtLot  SqFtTotLiving  \\\n",
       "1030   0.936811      587098.0               1     7134           1620   \n",
       "5781   0.996094      953725.0               1    15923           3690   \n",
       "2801   0.716912      443569.0               1    14732           1540   \n",
       "14633  0.880515      283868.0               1     1558           1860   \n",
       "11532  0.900965      610457.0               1     6955           2451   \n",
       "\n",
       "       SqFtFinBasement  Bathrooms  Bedrooms  BldgGrade  YrBuilt  YrRenovated  \\\n",
       "1030                 0       1.50         3          8     1953            0   \n",
       "5781              1700       3.00         3          8     1952         2000   \n",
       "2801                 0       1.50         3          7     1965            0   \n",
       "14633                0       2.25         3          8     2014            0   \n",
       "11532                0       2.50         3          9     1997            0   \n",
       "\n",
       "       TrafficNoise  LandVal  ImpsVal  ZipCode  NewConstruction  \n",
       "1030              0   348000   280000    98115            False  \n",
       "5781              0   597000   356000    98040            False  \n",
       "2801              0   235000   172000    98118            False  \n",
       "14633             0    93000   315000    98103            False  \n",
       "11532             0   205000   290000    98056            False  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the `LinearRegression` model from _scikit-learn_."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 - Multiple Linear Regression (SKlearn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['DocumentDate', 'SalePrice', 'PropertyID', 'PropertyType', 'ym',\n",
      "       'zhvi_px', 'zhvi_idx', 'AdjSalePrice', 'NbrLivingUnits', 'SqFtLot',\n",
      "       'SqFtTotLiving', 'SqFtFinBasement', 'Bathrooms', 'Bedrooms',\n",
      "       'BldgGrade', 'YrBuilt', 'YrRenovated', 'TrafficNoise', 'LandVal',\n",
      "       'ImpsVal', 'ZipCode', 'NewConstruction'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(house.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AdjSalePrice</th>\n",
       "      <th>SqFtTotLiving</th>\n",
       "      <th>SqFtLot</th>\n",
       "      <th>Bathrooms</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>BldgGrade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2957</th>\n",
       "      <td>443157.0</td>\n",
       "      <td>2230</td>\n",
       "      <td>5543</td>\n",
       "      <td>2.50</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5233</th>\n",
       "      <td>827667.0</td>\n",
       "      <td>2790</td>\n",
       "      <td>10819</td>\n",
       "      <td>2.75</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3390</th>\n",
       "      <td>670426.0</td>\n",
       "      <td>1900</td>\n",
       "      <td>46609</td>\n",
       "      <td>2.50</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13107</th>\n",
       "      <td>545515.0</td>\n",
       "      <td>2440</td>\n",
       "      <td>8000</td>\n",
       "      <td>2.75</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22926</th>\n",
       "      <td>358543.0</td>\n",
       "      <td>1620</td>\n",
       "      <td>5289</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       AdjSalePrice  SqFtTotLiving  SqFtLot  Bathrooms  Bedrooms  BldgGrade\n",
       "2957       443157.0           2230     5543       2.50         4          7\n",
       "5233       827667.0           2790    10819       2.75         4          9\n",
       "3390       670426.0           1900    46609       2.50         4          7\n",
       "13107      545515.0           2440     8000       2.75         5          7\n",
       "22926      358543.0           1620     5289       2.00         3          6"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subset = ['AdjSalePrice', 'SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms', 'BldgGrade']\n",
    "house[subset].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept: -511325.143\n",
      "Coefficients:\n",
      " SqFtTotLiving: 228.67639967262733\n",
      " SqFtLot: -0.1370674484066895\n",
      " Bathrooms: -24265.616030771384\n",
      " Bedrooms: -46713.96975482197\n",
      " BldgGrade: 105852.42400327271\n"
     ]
    }
   ],
   "source": [
    "predictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms', 'BldgGrade']\n",
    "outcome = 'AdjSalePrice'\n",
    "\n",
    "house_lm = LinearRegression()\n",
    "house_lm.fit(house[predictors], house[outcome])\n",
    "\n",
    "print(f'Intercept: {house_lm.intercept_:.3f}')\n",
    "print('Coefficients:')\n",
    "for name, coef in zip(predictors, house_lm.coef_):\n",
    "    print(f' {name}: {coef}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assessing the Model with performance metricss\n",
    "_Scikit-learn_ provides a number of metrics to determine the quality of a model. Here we use the `r2_score` and `RMSE`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data:\n",
      "RMSE: 255506\n",
      "r2: 0.5449\n",
      "Validation data:\n",
      "RMSE_test: 283098\n",
      "r2_test: 0.5252\n"
     ]
    }
   ],
   "source": [
    "fitted = house_lm.predict(house[predictors])\n",
    "RMSE = np.sqrt(mean_squared_error(house[outcome], fitted))\n",
    "r2 = r2_score(house[outcome], fitted)\n",
    "print('Training data:')\n",
    "print(f'RMSE: {RMSE:.0f}')\n",
    "print(f'r2: {r2:.4f}')\n",
    "\n",
    "fitted_test = house_lm.predict(house_test[predictors])\n",
    "RMSE_test = np.sqrt(mean_squared_error(house_test[outcome], fitted_test))\n",
    "r2_test = r2_score(house_test[outcome], fitted_test)\n",
    "print('Validation data:')\n",
    "print(f'RMSE_test: {RMSE_test:.0f}')\n",
    "print(f'r2_test: {r2_test:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2 - Multiple Linear Regression (statsmodels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While _scikit-learn_ provides a variety of different metrics, _statsmodels_ provides a more in-depth analysis of the linear regression model. This package has two different ways of specifying the model, one that is similar to _scikit-learn_ and one that allows specifying _R_-style formulas. Here we use the first approach. As _statsmodels_ doesn't add an intercept automaticaly, we need to add a constant column with value 1 to the predictors. We can use the _pandas_ method assign for this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:           AdjSalePrice   R-squared:                       0.545\n",
      "Model:                            OLS   Adj. R-squared:                  0.545\n",
      "Method:                 Least Squares   F-statistic:                     4345.\n",
      "Date:                Sat, 28 Jan 2023   Prob (F-statistic):               0.00\n",
      "Time:                        02:16:59   Log-Likelihood:            -2.5173e+05\n",
      "No. Observations:               18149   AIC:                         5.035e+05\n",
      "Df Residuals:                   18143   BIC:                         5.035e+05\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=================================================================================\n",
      "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "SqFtTotLiving   228.6764      4.295     53.240      0.000     220.257     237.095\n",
      "SqFtLot          -0.1371      0.069     -1.994      0.046      -0.272      -0.002\n",
      "Bathrooms     -2.427e+04   3960.199     -6.127      0.000    -3.2e+04   -1.65e+04\n",
      "Bedrooms      -4.671e+04   2704.999    -17.269      0.000    -5.2e+04   -4.14e+04\n",
      "BldgGrade      1.059e+05   2625.584     40.316      0.000    1.01e+05    1.11e+05\n",
      "const         -5.113e+05   1.71e+04    -29.912      0.000   -5.45e+05   -4.78e+05\n",
      "==============================================================================\n",
      "Omnibus:                    24016.964   Durbin-Watson:                   1.970\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         19426457.321\n",
      "Skew:                           6.960   Prob(JB):                         0.00\n",
      "Kurtosis:                     162.673   Cond. No.                     2.78e+05\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.78e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "mlr_sm = sm.OLS(house[outcome], house[predictors].assign(const=1))\n",
    "results = mlr_sm.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3 Correlations between predictors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation Matrix \n",
      "                SqFtTotLiving   SqFtLot  Bathrooms  Bedrooms  BldgGrade\n",
      "SqFtTotLiving       1.000000  0.189457   0.763314  0.598110   0.772256\n",
      "SqFtLot             0.189457  1.000000   0.101955  0.065277   0.144748\n",
      "Bathrooms           0.763314  0.101955   1.000000  0.534299   0.658474\n",
      "Bedrooms            0.598110  0.065277   0.534299  1.000000   0.365658\n",
      "BldgGrade           0.772256  0.144748   0.658474  0.365658   1.000000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 0, 'SqFtTotLiving'),\n",
       " Text(1.5, 0, 'SqFtLot'),\n",
       " Text(2.5, 0, 'Bathrooms'),\n",
       " Text(3.5, 0, 'Bedrooms'),\n",
       " Text(4.5, 0, 'BldgGrade')]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = house[predictors].corr()\n",
    "print(\"Correlation Matrix \\n {}\".format(corr))\n",
    "\n",
    "ax = sns.heatmap(\n",
    "    corr, \n",
    "    vmin=-1, vmax=1, center=0,\n",
    "    cmap=sns.diverging_palette(20, 220, n=200),\n",
    "    square=True\n",
    ")\n",
    "ax.set_xticklabels(\n",
    "    ax.get_xticklabels(),\n",
    "    rotation=45,\n",
    "    horizontalalignment='right'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 - Model Selection and Stepwise Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SqFtTotLiving</th>\n",
       "      <th>SqFtLot</th>\n",
       "      <th>Bathrooms</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>BldgGrade</th>\n",
       "      <th>PropertyType</th>\n",
       "      <th>NbrLivingUnits</th>\n",
       "      <th>SqFtFinBasement</th>\n",
       "      <th>YrBuilt</th>\n",
       "      <th>YrRenovated</th>\n",
       "      <th>NewConstruction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2957</th>\n",
       "      <td>2230</td>\n",
       "      <td>5543</td>\n",
       "      <td>2.50</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>1</td>\n",
       "      <td>580</td>\n",
       "      <td>2005</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5233</th>\n",
       "      <td>2790</td>\n",
       "      <td>10819</td>\n",
       "      <td>2.75</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1996</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3390</th>\n",
       "      <td>1900</td>\n",
       "      <td>46609</td>\n",
       "      <td>2.50</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>1</td>\n",
       "      <td>720</td>\n",
       "      <td>1974</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13107</th>\n",
       "      <td>2440</td>\n",
       "      <td>8000</td>\n",
       "      <td>2.75</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>1</td>\n",
       "      <td>1200</td>\n",
       "      <td>1972</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22926</th>\n",
       "      <td>1620</td>\n",
       "      <td>5289</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>Single Family</td>\n",
       "      <td>1</td>\n",
       "      <td>810</td>\n",
       "      <td>1945</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       SqFtTotLiving  SqFtLot  Bathrooms  Bedrooms  BldgGrade   PropertyType  \\\n",
       "2957            2230     5543       2.50         4          7  Single Family   \n",
       "5233            2790    10819       2.75         4          9  Single Family   \n",
       "3390            1900    46609       2.50         4          7  Single Family   \n",
       "13107           2440     8000       2.75         5          7  Single Family   \n",
       "22926           1620     5289       2.00         3          6  Single Family   \n",
       "\n",
       "       NbrLivingUnits  SqFtFinBasement  YrBuilt  YrRenovated  NewConstruction  \n",
       "2957                1              580     2005            0            False  \n",
       "5233                1                0     1996            0            False  \n",
       "3390                1              720     1974            0            False  \n",
       "13107               1             1200     1972            0            False  \n",
       "22926               1              810     1945            0            False  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms',\n",
    "              'BldgGrade', 'PropertyType', 'NbrLivingUnits',\n",
    "              'SqFtFinBasement', 'YrBuilt', 'YrRenovated', \n",
    "              'NewConstruction']\n",
    "house[predictors].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Predictors before nominal varibale(s) treatment: (18149, 11) \n",
      "\n",
      "PropertyType List: \n",
      "Single Family    16594\n",
      "Townhouse         1349\n",
      "Multiplex          206\n",
      "Name: PropertyType, dtype: int64\n",
      "\n",
      " Predictors after nominal varibale(s) treatment: (18149, 12) \n",
      "\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:           AdjSalePrice   R-squared:                       0.598\n",
      "Model:                            OLS   Adj. R-squared:                  0.597\n",
      "Method:                 Least Squares   F-statistic:                     2244.\n",
      "Date:                Sat, 28 Jan 2023   Prob (F-statistic):               0.00\n",
      "Time:                        02:23:58   Log-Likelihood:            -2.5061e+05\n",
      "No. Observations:               18149   AIC:                         5.012e+05\n",
      "Df Residuals:                   18136   BIC:                         5.013e+05\n",
      "Df Model:                          12                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================================\n",
      "                                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------\n",
      "SqFtTotLiving                199.0740      4.662     42.699      0.000     189.936     208.213\n",
      "SqFtLot                        0.0118      0.065      0.181      0.856      -0.116       0.140\n",
      "Bathrooms                   3.469e+04   4160.530      8.338      0.000    2.65e+04    4.28e+04\n",
      "Bedrooms                   -5.144e+04   2604.842    -19.747      0.000   -5.65e+04   -4.63e+04\n",
      "BldgGrade                   1.364e+05   2676.358     50.951      0.000    1.31e+05    1.42e+05\n",
      "NbrLivingUnits              3.136e+04   1.87e+04      1.678      0.093   -5266.113     6.8e+04\n",
      "SqFtFinBasement                8.3702      5.084      1.646      0.100      -1.595      18.335\n",
      "YrBuilt                    -3399.6947     84.526    -40.221      0.000   -3565.374   -3234.016\n",
      "YrRenovated                    2.3885      4.307      0.555      0.579      -6.053      10.830\n",
      "NewConstruction            -5499.9964   6525.271     -0.843      0.399   -1.83e+04    7290.153\n",
      "PropertyType_Single Family  5.221e+04    2.8e+04      1.866      0.062   -2645.540    1.07e+05\n",
      "PropertyType_Townhouse      1.122e+05    2.9e+04      3.865      0.000    5.53e+04    1.69e+05\n",
      "const                       5.813e+06   1.69e+05     34.357      0.000    5.48e+06    6.14e+06\n",
      "==============================================================================\n",
      "Omnibus:                    25216.878   Durbin-Watson:                   1.971\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         26749399.830\n",
      "Skew:                           7.585   Prob(JB):                         0.00\n",
      "Kurtosis:                     190.464   Cond. No.                     2.90e+06\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.9e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n Predictors before nominal varibale(s) treatment: {} \\n\".format(house[predictors].shape))\n",
    "print(\"PropertyType List: \\n{}\".format(house['PropertyType'].value_counts(dropna=False)))\n",
    "\n",
    "X = pd.get_dummies(house[predictors], drop_first=True) # why drop_first?\n",
    "X['NewConstruction'] = [1 if nc else 0 for nc in X['NewConstruction']]\n",
    "\n",
    "print(\"\\n Predictors after nominal varibale(s) treatment: {} \\n\".format(X.shape))\n",
    "\n",
    "# fit model\n",
    "house_full = sm.OLS(house[outcome], X.assign(const=1))\n",
    "results = house_full.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the `stepwise_selection` method from the _dmba_ package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variables: SqFtTotLiving, SqFtLot, Bathrooms, Bedrooms, BldgGrade, NbrLivingUnits, SqFtFinBasement, YrBuilt, YrRenovated, NewConstruction, PropertyType_Single Family, PropertyType_Townhouse\n",
      "Start: score=517743.16, constant\n",
      "Step: score=505664.43, add SqFtTotLiving\n",
      "Step: score=503843.31, add BldgGrade\n",
      "Step: score=501791.21, add YrBuilt\n",
      "Step: score=501416.23, add Bedrooms\n",
      "Step: score=501304.34, add Bathrooms\n",
      "Step: score=501245.52, add PropertyType_Townhouse\n",
      "Step: score=501244.67, add SqFtFinBasement\n",
      "Step: score=501244.67, unchanged None\n",
      "\n",
      "Intercept: 5955401.747\n",
      "Coefficients:\n",
      " SqFtTotLiving: 199.1914740315821\n",
      " BldgGrade: 136324.200704126\n",
      " YrBuilt: -3430.286842766684\n",
      " Bedrooms: -51402.46644366862\n",
      " Bathrooms: 35183.17118581531\n",
      " PropertyType_Townhouse: 58911.08799251239\n",
      " SqFtFinBasement: 8.52383251515481\n"
     ]
    }
   ],
   "source": [
    "y = house[outcome]\n",
    "\n",
    "def train_model(variables):\n",
    "    if len(variables) == 0:\n",
    "        return None\n",
    "    model = LinearRegression()\n",
    "    model.fit(X[variables], y)\n",
    "    return model\n",
    "\n",
    "def score_model(model, variables):\n",
    "    if len(variables) == 0:\n",
    "        return AIC_score(y, [y.mean()] * len(y), model, df=1)\n",
    "    return AIC_score(y, model.predict(X[variables]), model)\n",
    "\n",
    "best_model, best_variables = stepwise_selection(X.columns, train_model, score_model, verbose=True)\n",
    "\n",
    "print()\n",
    "print(f'Intercept: {best_model.intercept_:.3f}')\n",
    "print('Coefficients:')\n",
    "for name, coef in zip(best_variables, best_model.coef_):\n",
    "    print(f' {name}: {coef}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3 - Weighted regression\n",
    "For the house data recent sale price is more relavent for future prediction, old sale data is less reliable, therefore, we like to emphasis the recent sale data by apply more weight. We will use year the house sale to 2005 as weight.\n",
    "\n",
    "We can calculate the Year from the date column using either a list comprehension or the data frame's `apply` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "DocumentDate List \n",
      "2006-07-26    52\n",
      "2006-08-21    46\n",
      "2006-04-25    45\n",
      "2006-05-30    44\n",
      "2006-08-24    44\n",
      "              ..\n",
      "2013-01-22     1\n",
      "2014-02-21     1\n",
      "2010-10-02     1\n",
      "2014-01-03     1\n",
      "2011-12-30     1\n",
      "Name: DocumentDate, Length: 2466, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nDocumentDate List \\n{}\".format(house['DocumentDate'].value_counts(dropna=False)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "house['Year'] = pd.to_datetime(house['DocumentDate']).dt.year\n",
    "house['Weight'] = house['Year'] - (house['Year'].min()-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# other ways to parse yewr\n",
    "# house['Year'] = [int(date.split('-')[0]) for date in house.DocumentDate]  #list comprehension\n",
    "# house['Year'] = house.DocumentDate.apply(lambda d: int(d.split('-')[0]))  # apply()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/tn/0z9twpqx19g80xjvqb4w0_jw0000gn/T/ipykernel_73372/678231476.py:6: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  pd.DataFrame({\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predictor</th>\n",
       "      <th>house_lm</th>\n",
       "      <th>house_wt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SqFtTotLiving</td>\n",
       "      <td>228.676400</td>\n",
       "      <td>244.341366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SqFtLot</td>\n",
       "      <td>-0.137067</td>\n",
       "      <td>-0.370270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bathrooms</td>\n",
       "      <td>-24265.616031</td>\n",
       "      <td>-31660.067343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bedrooms</td>\n",
       "      <td>-46713.969755</td>\n",
       "      <td>-52171.544134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BldgGrade</td>\n",
       "      <td>105852.424003</td>\n",
       "      <td>114701.548557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>intercept</td>\n",
       "      <td>-511325.143087</td>\n",
       "      <td>-570889.909700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       predictor       house_lm       house_wt\n",
       "0  SqFtTotLiving     228.676400     244.341366\n",
       "1        SqFtLot      -0.137067      -0.370270\n",
       "2      Bathrooms  -24265.616031  -31660.067343\n",
       "3       Bedrooms  -46713.969755  -52171.544134\n",
       "4      BldgGrade  105852.424003  114701.548557\n",
       "5      intercept -511325.143087 -570889.909700"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms', 'BldgGrade']\n",
    "outcome = 'AdjSalePrice'\n",
    "\n",
    "house_wt = LinearRegression()\n",
    "house_wt.fit(house[predictors], house[outcome], sample_weight=house['Weight'])\n",
    "pd.DataFrame({\n",
    "    'predictor': predictors,\n",
    "    'house_lm': house_lm.coef_,\n",
    "    'house_wt': house_wt.coef_,\n",
    "}).append({\n",
    "    'predictor': 'intercept', \n",
    "    'house_lm': house_lm.intercept_,\n",
    "    'house_wt': house_wt.intercept_,\n",
    "}, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       abs_residual_lm  abs_residual_wt  Year\n",
      "2957      48153.512243     43856.424349  2007\n",
      "5233       3382.427799     15712.124016  2013\n",
      "3390     260207.511485    279250.744085  2006\n",
      "13107     59299.592309     68186.203658  2008\n",
      "22926     53695.922658     67183.731237  2007\n",
      "\n",
      "\n",
      "Year   Abs_residual_lm    Abs_residual_wt\n",
      "2006 138179.10874150335 143601.61205456185\n",
      "2007 147332.9541605233 151886.90347053696\n",
      "2008 141432.17758821006 145456.6801747045\n",
      "2009 143608.10993789474 147193.50389159613\n",
      "2010 166737.3956289376 169606.79835510827\n",
      "2011 161883.6420742616 164837.92285076942\n",
      "2012 174659.59036774436 176464.07894653897\n",
      "2013 197154.31319727775 199072.3164480179\n",
      "2014 183417.16555352183 185250.8351378108\n",
      "2015 178003.13599836404 175179.82927318604\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "residuals = pd.DataFrame({\n",
    "    'abs_residual_lm': np.abs(house_lm.predict(house[predictors]) - house[outcome]),\n",
    "    'abs_residual_wt': np.abs(house_wt.predict(house[predictors]) - house[outcome]),\n",
    "    'Year': house['Year'],\n",
    "})\n",
    "print(residuals.head())\n",
    "axes = residuals.boxplot(['abs_residual_lm', 'abs_residual_wt'], by='Year', figsize=(10, 4))\n",
    "axes[0].set_ylim(0, 300000)\n",
    "\n",
    "print(\"\\n\\nYear   Abs_residual_lm    Abs_residual_wt\")\n",
    "for year, group in residuals.groupby('Year'):\n",
    "    print(year, np.mean(group['abs_residual_lm']), np.mean(group['abs_residual_wt']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Seems only help 2015 prediction reduce the residuals. \n",
    "\n",
    "If we have a recent holdout sample we can test the weight could help for future prediction or not"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4 - Regularization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       SqFtTotLiving  SqFtLot  Bathrooms  Bedrooms  BldgGrade   PropertyType  \\\n",
      "2957            2230     5543       2.50         4          7  Single Family   \n",
      "5233            2790    10819       2.75         4          9  Single Family   \n",
      "3390            1900    46609       2.50         4          7  Single Family   \n",
      "13107           2440     8000       2.75         5          7  Single Family   \n",
      "22926           1620     5289       2.00         3          6  Single Family   \n",
      "\n",
      "       NbrLivingUnits  SqFtFinBasement  YrBuilt  YrRenovated  NewConstruction  \n",
      "2957                1              580     2005            0            False  \n",
      "5233                1                0     1996            0            False  \n",
      "3390                1              720     1974            0            False  \n",
      "13107               1             1200     1972            0            False  \n",
      "22926               1              810     1945            0            False  \n",
      "\n",
      " PropertyType List \n",
      "Single Family    16594\n",
      "Townhouse         1349\n",
      "Multiplex          206\n",
      "Name: PropertyType, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "predictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms',\n",
    "              'BldgGrade', 'PropertyType', 'NbrLivingUnits',\n",
    "              'SqFtFinBasement', 'YrBuilt', 'YrRenovated', \n",
    "              'NewConstruction']\n",
    "\n",
    "outcome = 'AdjSalePrice'\n",
    "\n",
    "print(house[predictors].head())\n",
    "\n",
    "print(\"\\n PropertyType List \\n{}\".format(house['PropertyType'].value_counts(dropna=False)))\n",
    "\n",
    "X_train = pd.get_dummies(house[predictors], drop_first=True)\n",
    "X_train['NewConstruction'] = [1 if nc else 0 for nc in X_train['NewConstruction']]\n",
    "y_train = house[outcome]\n",
    "\n",
    "X_test = pd.get_dummies(house_test[predictors], drop_first=True)\n",
    "X_test['NewConstruction'] = [1 if nc else 0 for nc in X_test['NewConstruction']]\n",
    "y_test = house_test[outcome]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Regular Multiple Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Intercept': 5812823.777,\n",
       " 'SqFtTotLiving': 199.074,\n",
       " 'SqFtLot': 0.012,\n",
       " 'Bathrooms': 34692.447,\n",
       " 'Bedrooms': -51438.293,\n",
       " 'BldgGrade': 136363.404,\n",
       " 'NbrLivingUnits': 31359.787,\n",
       " 'SqFtFinBasement': 8.37,\n",
       " 'YrBuilt': -3399.695,\n",
       " 'YrRenovated': 2.388,\n",
       " 'NewConstruction': -5499.996,\n",
       " 'PropertyType_Single Family': 52206.012}"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house_lm = LinearRegression()\n",
    "house_lm.fit(X_train, y_train)\n",
    "\n",
    "mlr_coefs = dict(\n",
    "    zip(['Intercept'] + X_train.columns.tolist()[:-1], \n",
    "        np.round(np.concatenate((house_lm.intercept_, house_lm.coef_), \n",
    "                                axis=None), 3))\n",
    ")\n",
    "\n",
    "mlr_coefs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "regular mlr MSE: 265185\n",
      "r2_test: 0.5834\n"
     ]
    }
   ],
   "source": [
    "fitted_test = house_lm.predict(X_test)\n",
    "MSE_test = np.sqrt(mean_squared_error(y_test, fitted_test))\n",
    "r2 = r2_score(y_test, fitted_test)\n",
    "print(f'regular mlr MSE: {MSE_test:.0f}')\n",
    "print(f'r2_test: {r2:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### L2 - Ridge regression (Parameter shrinkage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/anaconda3/envs/intro/lib/python3.9/site-packages/sklearn/linear_model/_base.py:141: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
      "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
      "\n",
      "from sklearn.pipeline import make_pipeline\n",
      "\n",
      "model = make_pipeline(StandardScaler(with_mean=False), _RidgeGCV())\n",
      "\n",
      "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
      "\n",
      "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
      "model.fit(X, y, **kwargs)\n",
      "\n",
      "Set parameter alphas to: original_alphas * n_samples. \n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ridge Regression MAE: 137620.46\n",
      "Ridge Regression alpha: 0.0063387702728384876\n",
      "Ridge Regression coefficients:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'Intercept': 5713135.572,\n",
       " 'SqFtTotLiving': 195.021,\n",
       " 'SqFtLot': 0.023,\n",
       " 'Bathrooms': 36027.902,\n",
       " 'Bedrooms': -50171.523,\n",
       " 'BldgGrade': 136146.276,\n",
       " 'NbrLivingUnits': 23704.735,\n",
       " 'SqFtFinBasement': 10.96,\n",
       " 'YrBuilt': -3336.787,\n",
       " 'YrRenovated': 3.36,\n",
       " 'NewConstruction': -5435.556,\n",
       " 'PropertyType_Single Family': 37743.105}"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge_cv = RidgeCV(normalize=True, alphas=np.logspace(-10, 1, 400))\n",
    "ridge_model = ridge_cv.fit(X_train, y_train)\n",
    "ridge_prediction = ridge_model.predict(X_test)\n",
    "ridge_mae = np.mean(np.abs(y_test - ridge_prediction))\n",
    "ridge_coefs = dict(\n",
    "    zip(['Intercept'] + X_train.columns.tolist()[:-1], \n",
    "        np.round(np.concatenate((ridge_model.intercept_, ridge_model.coef_), \n",
    "                                axis=None), 3))\n",
    ")\n",
    "\n",
    "print('Ridge Regression MAE: {}'.format(np.round(ridge_mae, 3)))\n",
    "print('Ridge Regression alpha:', ridge_cv.alpha_)\n",
    "print('Ridge Regression coefficients:')\n",
    "ridge_coefs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### L1 - Lasso regression (Parameter sparsity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LASSO MAE: 137454.385\n",
      "LASSO alpha: 10.0\n",
      "LASSO coefficients:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/anaconda3/envs/intro/lib/python3.9/site-packages/sklearn/linear_model/_base.py:141: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
      "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
      "\n",
      "from sklearn.pipeline import make_pipeline\n",
      "\n",
      "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
      "\n",
      "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
      "\n",
      "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
      "model.fit(X, y, **kwargs)\n",
      "\n",
      "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'Intercept': 5709173.389,\n",
       " 'SqFtTotLiving': 196.045,\n",
       " 'SqFtLot': 0.0,\n",
       " 'Bathrooms': 31928.418,\n",
       " 'Bedrooms': -47584.042,\n",
       " 'BldgGrade': 135992.837,\n",
       " 'NbrLivingUnits': 0.0,\n",
       " 'SqFtFinBasement': 8.531,\n",
       " 'YrBuilt': -3303.469,\n",
       " 'YrRenovated': 1.424,\n",
       " 'NewConstruction': -221.885,\n",
       " 'PropertyType_Single Family': -0.0}"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_cv = LassoCV(normalize=True, alphas=np.logspace(-10, 1, 400))\n",
    "lasso_model = lasso_cv.fit(X_train, y_train)\n",
    "lasso_prediction = lasso_model.predict(X_test)\n",
    "lasso_mae = np.mean(np.abs(y_test - lasso_prediction))\n",
    "lasso_coefs = dict(\n",
    "    zip(['Intercept'] + X_train.columns.tolist()[:-1], \n",
    "        np.round(np.concatenate((lasso_model.intercept_, lasso_model.coef_), axis=None), 3))\n",
    ")\n",
    "\n",
    "print('LASSO MAE: {}'.format(np.round(lasso_mae, 3)))\n",
    "print('LASSO alpha:', lasso_cv.alpha_)\n",
    "print('LASSO coefficients:')\n",
    "lasso_coefs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Home Work"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Compare the three model fits and draw conclusion \n",
    "from the comparision of the three model fits regarding there coefficent difference"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Show the three model performance on both train and test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
<<<<<<< HEAD
   "version": "3.10.9"
=======
   "version": "3.9.13"
>>>>>>> 232c483e9b79411fc402ece720475e03f0e099ce
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
